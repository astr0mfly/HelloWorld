<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>“编码人生” on Valencia</title>
    <link>https://astr0mfly.github.io/categories/%E7%BC%96%E7%A0%81%E4%BA%BA%E7%94%9F/</link>
    <description>Recent content in “编码人生” on Valencia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 25 Apr 2019 07:04:20 -0700</lastBuildDate>
    
	<atom:link href="https://astr0mfly.github.io/categories/%E7%BC%96%E7%A0%81%E4%BA%BA%E7%94%9F/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>distri-load_balance</title>
      <link>https://astr0mfly.github.io/blog/2019-04/distri-load_balance/</link>
      <pubDate>Thu, 25 Apr 2019 07:04:20 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/distri-load_balance/</guid>
      <description>负载均衡(Load Balance) 负载均衡可以将工作任务分摊到多个处理单元，从而提高并发处理能力。 常见的web负载均衡技术包括：DNS轮询、IP负载均衡和CDN。其中IP负载均衡可以使用硬件设备或软件方式来实现。 服务器集群(Cluster)使得多个服务器节点能够协同工作，根据目的的不同，服务器集群可以分为： 高性能集群：将单个重负载的请求分散到多个节点进行处理，最后再将处理结果进行汇总 高可用集群：提高冗余单元，避</description>
    </item>
    
    <item>
      <title>Go-Lession</title>
      <link>https://astr0mfly.github.io/blog/2019-04/go-lession/</link>
      <pubDate>Thu, 25 Apr 2019 04:21:58 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/go-lession/</guid>
      <description>启动两个线程，合并输出 package main import &amp;quot;fmt&amp;quot; func main() { ch1 := make(chan int) ch2 := make(chan int) go func() { for i := 0; i &amp;lt; 10; i++ { if i%2 == 0 { ch1 &amp;lt;- i } } }() go func() { for i := 0; i &amp;lt; 10; i++ { if i%2 == 1 { ch2 &amp;lt;- i } } }() tmp := 0 for i := 0; i &amp;lt; 5; i++ { tmp = &amp;lt;-ch1 fmt.Println(tmp) tmp = &amp;lt;-ch2 fmt.Println(tmp) } } 版本控制 Version Action Time 1.0 Init 2019-04-25T04:21:58-07:00</description>
    </item>
    
    <item>
      <title>distributed-mapreduce</title>
      <link>https://astr0mfly.github.io/blog/2019-04/distributed-mapreduce/</link>
      <pubDate>Thu, 25 Apr 2019 03:51:49 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/distributed-mapreduce/</guid>
      <description>MapReduce(并行运算编程模型)基础概念 MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念&amp;rdquo;Map（映射）&amp;rdquo;和&amp;rdquo;Reduce（归约）&amp;rdquo;，是它们的主要思想.软件实现是指定一个Map（映射）函数，用来把一组键值对映射成一组新的键值对，指定并发的Reduce（归约）函数，用来保证所有映射的键值对中的每一个共享相同的键组。</description>
    </item>
    
    <item>
      <title>git-flow</title>
      <link>https://astr0mfly.github.io/blog/2019-04/git-flow/</link>
      <pubDate>Wed, 24 Apr 2019 20:24:45 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/git-flow/</guid>
      <description>Devops = &amp;ldquo;Development&amp;rdquo; + &amp;ldquo;Operations&amp;rdquo; DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 在敏捷开发的基础上，提出开发与运营之间的软件版本迭代循环。 工具链 代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion 构建工具：Ant、Gradle、maven 自动部署：Capistrano、CodeDeploy 持续集成（</description>
    </item>
    
    <item>
      <title>基于GO的分布式云存储框架</title>
      <link>https://astr0mfly.github.io/blog/2019-04/%E5%9F%BA%E4%BA%8Ego%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%91%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 24 Apr 2019 20:21:23 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/%E5%9F%BA%E4%BA%8Ego%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%91%E5%AD%98%E5%82%A8%E6%A1%86%E6%9E%B6/</guid>
      <description>AstroCloudFIle 基于golang实现的一种分布式云存储服务 关于分支和标签 分支说明: master分支: 通过原生net/http实现各接口功能 gin分支: 通过Gin框架来改造(微服务化章节之后主要基于Gin框架来进行演示) pkg分支: 通过go-bindata等工具实现静态资源打包的一个示例 标签 tag是分支代码某个阶段的快照。如master主分支的v0.1是首个发布的版本，该版本是接入了阿里OSS。 关于需要手动安装的</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://astr0mfly.github.io/blog/2019-04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 Apr 2019 08:14:44 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>简介 推荐书籍《设计模式&amp;ndash;可复用面向对象软件的基础》 底层思维：向下，把握机器底层-&amp;gt;语言构造、编译转换、内存模型、运行机制 抽象思维：面向对象、组件封装、设计模式、架构模式 深入理解三大面向对象机制： - 封装，隐藏内部实现 - 继承，复用现有代码 - 多态，改写对象行为 设计模式详解 策略模式 起因 软件构造的过程中，算法和对象容易耦合，那么能不能让算法与对象本身解耦呢？ 要点 Strategy及其字类为组</description>
    </item>
    
    <item>
      <title>Go-国内下载官方工具</title>
      <link>https://astr0mfly.github.io/blog/2019-04/go-%E5%9B%BD%E5%86%85%E4%B8%8B%E8%BD%BD%E5%AE%98%E6%96%B9%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 24 Apr 2019 06:45:07 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/go-%E5%9B%BD%E5%86%85%E4%B8%8B%E8%BD%BD%E5%AE%98%E6%96%B9%E5%B7%A5%E5%85%B7/</guid>
      <description>国内下载golang.org中的工具包 国内有某种不可描述的原因，导致无法访问 golang.org,但是使用golang时官方工具包是必不可少的一部分. golang.org/x/这个目录，其实镜像托管在 github.com/golang/ GIT迁移 将Github的包下载到本地后，移动到相应的目录中. 如: net &amp;ndash;&amp;gt;&amp;gt; GOPATH/src/golang.org/x/net crypto &amp;ndash;&amp;gt;&amp;gt; GOPATH/src/golang.org/x/crypto build &amp;ndash;&amp;gt;&amp;gt; GOPATH/src/golang.org/x/build &amp;hellip; GIT下载 在 $GOPATH/src/golang.org/x/ 下通过git 进行 clone 如: ~/go/src/golang.org/x$ git clone http://github.com/golang/build 然后用git pull直接维护更新本地代码 版本控制 Version Action Time 1.0 Init 2019-04-24T06:45:07-07:00</description>
    </item>
    
    <item>
      <title>Golang安装环境搭建</title>
      <link>https://astr0mfly.github.io/blog/2019-04/golang%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 22 Apr 2019 04:12:48 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/golang%E5%AE%89%E8%A3%85%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>Go安装包下载 由于Go的官方网址国内不可达，推荐一个国内的镜像源： go语言中文网.Go安装包下载 编译安装 下载Linux版本：go1.12.4.linux-amd64.tar.gz #在下载文件夹下的Shell敲一下如下命令 sudo tar -C /usr/local -xzvf go1.12.4.linux-amd64.tar.gz #/etc/profile（全系统安装）或 $HOME/.profile 添加环境变量 export PATH=$PATH:/usr/local/go/bin 也有另一种方法添加环境变量： # vim /etc/profile.d/go.sh export PATH=$PATH:/usr/local/go/bin export GOPATH=$HOME/dev/go export GOBIN=$GOPATH/bin :wq! # source /etc/profile.d/go.sh 验证结果 创建一个hello.go的文件 package main import &amp;quot;fmt&amp;quot; func main() { fmt.Printf(&amp;quot;hello,</description>
    </item>
    
    <item>
      <title>使用hugo制作静态个人界面</title>
      <link>https://astr0mfly.github.io/blog/2019-04/%E4%BD%BF%E7%94%A8hugo%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Mon, 22 Apr 2019 04:09:23 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/%E4%BD%BF%E7%94%A8hugo%E5%88%B6%E4%BD%9C%E9%9D%99%E6%80%81%E4%B8%AA%E4%BA%BA%E7%95%8C%E9%9D%A2/</guid>
      <description>安装hugo 建议到如下链接下载对应文件，使用go get挺慢的。 https://github.com/gohugoio/hugo/releases 安装hugo 生成site并且 clone 对应皮肤的Git到theme文件夹下 调试 ：hugo server --theme=hyde --buildDrafts 打开 : http://localhost:1313 实时调试 生成部署： hugo --theme=hyde 上传到git ： git push -u origin master 实例皮肤：redlougue hugo链接： https://github.com/tmaiaroto/hugo-redlounge 路径解释 config.toml 站点全局的参数配置文件 archetypes Hugo的markdown文件中前置数据Front Matter定义的结构，默认使用的是default.md文件，可以自</description>
    </item>
    
  </channel>
</rss>