<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>“cpp” on Valencia</title>
    <link>https://astr0mfly.github.io/tags/cpp/</link>
    <description>Recent content in “cpp” on Valencia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Mon, 29 Apr 2019 02:47:43 -0700</lastBuildDate>
    
	<atom:link href="https://astr0mfly.github.io/tags/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tcp-Reaction</title>
      <link>https://astr0mfly.github.io/blog/2019-04/tcp-reaction/</link>
      <pubDate>Mon, 29 Apr 2019 02:47:43 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/tcp-reaction/</guid>
      <description>TCP通信基本流程 Windows 和 Linux 上常用的 socket API 函数并不多，除了特定操作系统提供的一些基于自身系统特性的 API， 大多数 Socket API 都源于BSD Socket （即伯克利套接字（Berkeley Sockets）），因此这些 socket 函数在不同的平台有着相似的签名和参数。 linux 查看socket函数帮助 man bind、man man、man 3 sleep windows 查看帮助 使用在线版本的 MSDN 理论剖析 服务端流程 &amp;gt;1. 调用 socket 函数创建 socket（侦听socket） &amp;gt;2. 调用 bind 函数 将 soc</description>
    </item>
    
    <item>
      <title>C&#43;&#43;如何做到反射</title>
      <link>https://astr0mfly.github.io/blog/2019-04/c-%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Thu, 25 Apr 2019 03:10:41 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/c-%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%8F%8D%E5%B0%84/</guid>
      <description>什么是反射 反射机制在java中是一个非常重要的特性，比如在spring框架中，就使用了xml + 反射来完成类的动态扩展。 换句话说，反射就是根据一个字符串查找到一个类，查找到一个函数，并能生成这个类，或者函数的实例；就是在运行期通过字符串到内存单元的反向映射。 怎么做到反射 在动态语言中，反射是非常容易实现的，在java中，由于有字节码作为中间层的存在，所以实现也并不复杂。但是对于c++来说，静态编译的程</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://astr0mfly.github.io/blog/2019-04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 24 Apr 2019 08:14:44 -0700</pubDate>
      
      <guid>https://astr0mfly.github.io/blog/2019-04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>简介 推荐书籍《设计模式&amp;ndash;可复用面向对象软件的基础》 底层思维：向下，把握机器底层-&amp;gt;语言构造、编译转换、内存模型、运行机制 抽象思维：面向对象、组件封装、设计模式、架构模式 深入理解三大面向对象机制： - 封装，隐藏内部实现 - 继承，复用现有代码 - 多态，改写对象行为 设计模式详解 策略模式 起因 软件构造的过程中，算法和对象容易耦合，那么能不能让算法与对象本身解耦呢？ 要点 Strategy及其字类为组</description>
    </item>
    
  </channel>
</rss>